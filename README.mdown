algo\_ds
========

Collection of algorithms and data structures implementations

Overview
--------
1. Linkedlist (C) 
   * Supported Ops : Push, Pop, Delete, Length, Disply, GetNth, Push at end, Insert at nth. 
2. Tree (C)       
   * Supported Ops : Build, Random insert, Display Rree, Count Red Children.
3. Range Minimum Query
   * Supported Ops: Query, Update, Print.
   * Algos : Preprocess, Query 
    * LookupTable : O(n^2), O(1)
    * SqrtPart     : O(n), O(sqrt(n))
    * SparseTable  : O(nlogn), O(1)
4. Binary Heap 
   * Supported Ops: Heapify, FindXtrma, ExtractXtrma, Insert, Delete, IncreaseKey, DeacreaseKey,
5. Tree atop an Array 
   * Supported Ops: Build, Sum(i,j), Max/Min(i,j), Update(k,j).  
6. Disjoint Set Data Structure 
   * Supported Ops: FindSet, UnionSet, PrintGraph (in GraphViz format). 

| DS		| Build	   | Space	| Query	 | Update |
| ------------- | -------- | ---------- | ------ | ------ |
| Linkedlist	| O(n)     |            |	 |	  |
| Tree		|	   |            | O(logn)| O(logn)|
| Binary Heap   | O(n)     |            |        |        |
| Disj Set      |          |            | O(alpha(n)) |        |
| RMQ           | O(n^2/O(n) |          | O(1)/O(sqrt(n) |   'X' |
| TreeAtopArray | O(nlogn) | O(nlogn)   | O(logn)| O(logn)|

Note: The above comlexity analysis is only a rough guide to the complexity of the implemented method, but they hold only for the abstract model they are part of, and might not have the exact gaurantees on real world computers. Further the Disjoint set data structure is implemented with both path compression and union by rank, though it might not exactly have the gaurantees stated above.  

TODO
----
0. Overall
 * Create makefile.
 * Automated testing harness.

1. Binary Heap
 * Fix tests, and use the new framework with new makefile.
 * Decide on whether to use int or template size
 * Move range checks into an interface, to avoid penalty of range checks for public functions, when they are called from within.
 * Templated return types for error codes, return by reference or exceptions : [see here](http://stackoverflow.com/questions/3157098/whats-the-right-approach-to-return-error-codes-in-c)
 * Write more systematic tests for coverage of edge/corner cases.
 * Implement O(n) Merge.

2. Tree A top an array
 * Template the code, review design.
 * Generalize it to take, index and data :
 * Implement Max and Min

3. Range Minimum Query 
 * Template the code, review design.
 * Write tests. 
 * Check Style guide.

4. Disjoint Set DS, linkedlist and Tree : 
 * Write tests.
 * Verify no memory leaks.
   

Commit Process
--------------
1. Verify accuracy with tests.
2. Verify there are no memory leaks with valgrind/memcheck.
3. Verify that there are no heap corruption and heap usage is not abnormal with massif.
4. Verify code is templated when possible or as per the case.
5. Verify that Style Guide is reasonably followed.
6. Update README.
